{"ast":null,"code":"var _jsxFileName = \"/Users/cedric/Desktop/projects/video_player_uploader-master/frontend-app/src/context/global.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GlobalContext = /*#__PURE__*/React.createContext();\n\n//actions\nconst LOADING = 'LOADING';\nconst SET_VIDEOS = 'SET_VIDEOS';\nconst SET_SELECTED_VIDEO = 'SET_SELECTED_VIDEO';\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case LOADING:\n      return {\n        ...state,\n        loading: true\n      };\n    case SET_VIDEOS:\n      return {\n        ...state,\n        loading: false,\n        videos: [...action.payload.map(video => {\n          return {\n            ...video,\n            videoUrl: `http://localhost:8000/public/videos/${video.filename}`\n          };\n        })]\n      };\n    default:\n      return state;\n  }\n  return state;\n};\nexport const GlobalProvider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  const initialState = {\n    videos: [],\n    loading: false\n  };\n  const [state, dispatch] = React.useReducer(reducer, initialState);\n\n  //get videos\n  const getAllVideos = async () => {\n    try {\n      const res = await fetch('http://localhost:8000/api/videos');\n      const data = await res.json();\n      dispatch({\n        type: SET_VIDEOS,\n        payload: data.videos\n      });\n    } catch (error) {}\n  };\n  useEffect(() => {\n    getAllVideos();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(GlobalContext.Provider, {\n    value: {\n      ...state,\n      getAllVideos\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, this);\n};\n_s(GlobalProvider, \"bgCdjuTOmPdSBRwTap80EFd9Y3U=\");\n_c = GlobalProvider;\nexport const useGlobalContext = () => {\n  _s2();\n  return React.useContext(GlobalContext);\n};\n_s2(useGlobalContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"GlobalProvider\");","map":{"version":3,"names":["React","useEffect","jsxDEV","_jsxDEV","GlobalContext","createContext","LOADING","SET_VIDEOS","SET_SELECTED_VIDEO","reducer","state","action","type","loading","videos","payload","map","video","videoUrl","filename","GlobalProvider","_ref","_s","children","initialState","dispatch","useReducer","getAllVideos","res","fetch","data","json","error","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useGlobalContext","_s2","useContext","$RefreshReg$"],"sources":["/Users/cedric/Desktop/projects/video_player_uploader-master/frontend-app/src/context/global.js"],"sourcesContent":["import React, { useEffect } from \"react\";\n\nconst GlobalContext = React.createContext()\n\n//actions\nconst LOADING = 'LOADING'\nconst SET_VIDEOS = 'SET_VIDEOS'\nconst SET_SELECTED_VIDEO = 'SET_SELECTED_VIDEO'\n\nconst reducer = (state, action) => {\n    switch(action.type){\n        case LOADING:\n            return {...state, loading: true}\n        case SET_VIDEOS:\n            return{\n                ...state,\n                loading: false,\n                videos: [\n                    ...action.payload.map((video) => {\n                        return{\n                            ...video,\n                            videoUrl: `http://localhost:8000/public/videos/${video.filename}`\n                        }\n                    })\n                ]\n            }\n        default:\n            return state\n    }\n\n    return state\n}\n\nexport const GlobalProvider = ({children}) => {\n\n\n    const initialState = {\n        videos: [],\n        loading: false,\n    }\n\n    const [state, dispatch] = React.useReducer(reducer, initialState)\n\n    //get videos\n    const getAllVideos = async () => {\n        try {\n            const res = await fetch('http://localhost:8000/api/videos');\n            const data = await res.json()\n\n            dispatch({type: SET_VIDEOS, payload: data.videos})\n        } catch (error) {\n            \n        }\n    }\n    \n    useEffect(() => {\n        getAllVideos()\n    }, [])\n\n    return (\n        <GlobalContext.Provider value={{\n            ...state,\n            getAllVideos\n        }}>\n            {children}\n        </GlobalContext.Provider>\n    )\n}\n\nexport const useGlobalContext = () => {\n    return React.useContext(GlobalContext)\n}"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzC,MAAMC,aAAa,gBAAGJ,KAAK,CAACK,aAAa,EAAE;;AAE3C;AACA,MAAMC,OAAO,GAAG,SAAS;AACzB,MAAMC,UAAU,GAAG,YAAY;AAC/B,MAAMC,kBAAkB,GAAG,oBAAoB;AAE/C,MAAMC,OAAO,GAAGA,CAACC,KAAK,EAAEC,MAAM,KAAK;EAC/B,QAAOA,MAAM,CAACC,IAAI;IACd,KAAKN,OAAO;MACR,OAAO;QAAC,GAAGI,KAAK;QAAEG,OAAO,EAAE;MAAI,CAAC;IACpC,KAAKN,UAAU;MACX,OAAM;QACF,GAAGG,KAAK;QACRG,OAAO,EAAE,KAAK;QACdC,MAAM,EAAE,CACJ,GAAGH,MAAM,CAACI,OAAO,CAACC,GAAG,CAAEC,KAAK,IAAK;UAC7B,OAAM;YACF,GAAGA,KAAK;YACRC,QAAQ,EAAG,uCAAsCD,KAAK,CAACE,QAAS;UACpE,CAAC;QACL,CAAC,CAAC;MAEV,CAAC;IACL;MACI,OAAOT,KAAK;EAAA;EAGpB,OAAOA,KAAK;AAChB,CAAC;AAED,OAAO,MAAMU,cAAc,GAAGC,IAAA,IAAgB;EAAAC,EAAA;EAAA,IAAf;IAACC;EAAQ,CAAC,GAAAF,IAAA;EAGrC,MAAMG,YAAY,GAAG;IACjBV,MAAM,EAAE,EAAE;IACVD,OAAO,EAAE;EACb,CAAC;EAED,MAAM,CAACH,KAAK,EAAEe,QAAQ,CAAC,GAAGzB,KAAK,CAAC0B,UAAU,CAACjB,OAAO,EAAEe,YAAY,CAAC;;EAEjE;EACA,MAAMG,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC7B,IAAI;MACA,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,kCAAkC,CAAC;MAC3D,MAAMC,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAI,EAAE;MAE7BN,QAAQ,CAAC;QAACb,IAAI,EAAEL,UAAU;QAAEQ,OAAO,EAAEe,IAAI,CAAChB;MAAM,CAAC,CAAC;IACtD,CAAC,CAAC,OAAOkB,KAAK,EAAE,CAEhB;EACJ,CAAC;EAED/B,SAAS,CAAC,MAAM;IACZ0B,YAAY,EAAE;EAClB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACIxB,OAAA,CAACC,aAAa,CAAC6B,QAAQ;IAACC,KAAK,EAAE;MAC3B,GAAGxB,KAAK;MACRiB;IACJ,CAAE;IAAAJ,QAAA,EACGA;EAAQ;IAAAY,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACY;AAEjC,CAAC;AAAAhB,EAAA,CAlCYF,cAAc;AAAAmB,EAAA,GAAdnB,cAAc;AAoC3B,OAAO,MAAMoB,gBAAgB,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAClC,OAAOzC,KAAK,CAAC0C,UAAU,CAACtC,aAAa,CAAC;AAC1C,CAAC;AAAAqC,GAAA,CAFYD,gBAAgB;AAAA,IAAAD,EAAA;AAAAI,YAAA,CAAAJ,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}