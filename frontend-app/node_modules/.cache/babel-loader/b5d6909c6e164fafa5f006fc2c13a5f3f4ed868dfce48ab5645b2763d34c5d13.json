{"ast":null,"code":"/*! @name videojs-contrib-quality-levels @version 3.0.0 @license Apache-2.0 */\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('video.js')) : typeof define === 'function' && define.amd ? define(['video.js'], factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.videojsContribQualityLevels = factory(global.videojs));\n})(this, function (videojs) {\n  'use strict';\n\n  function _interopDefaultLegacy(e) {\n    return e && typeof e === 'object' && 'default' in e ? e : {\n      'default': e\n    };\n  }\n  var videojs__default = /*#__PURE__*/_interopDefaultLegacy(videojs);\n\n  /**\n   * A single QualityLevel.\n   *\n   * interface QualityLevel {\n   *   readonly attribute DOMString id;\n   *            attribute DOMString label;\n   *   readonly attribute long width;\n   *   readonly attribute long height;\n   *   readonly attribute long bitrate;\n   *            attribute boolean enabled;\n   * };\n   *\n   * @class QualityLevel\n   */\n  class QualityLevel {\n    /**\n     * Creates a QualityLevel\n     *\n     * @param {Representation|Object} representation The representation of the quality level\n     * @param {string}   representation.id        Unique id of the QualityLevel\n     * @param {number=}  representation.width     Resolution width of the QualityLevel\n     * @param {number=}  representation.height    Resolution height of the QualityLevel\n     * @param {number}   representation.bandwidth Bitrate of the QualityLevel\n     * @param {number=}  representation.frameRate Frame-rate of the QualityLevel\n     * @param {Function} representation.enabled   Callback to enable/disable QualityLevel\n     */\n    constructor(representation) {\n      let level = this; // eslint-disable-line\n\n      level.id = representation.id;\n      level.label = level.id;\n      level.width = representation.width;\n      level.height = representation.height;\n      level.bitrate = representation.bandwidth;\n      level.frameRate = representation.frameRate;\n      level.enabled_ = representation.enabled;\n      Object.defineProperty(level, 'enabled', {\n        /**\n         * Get whether the QualityLevel is enabled.\n         *\n         * @return {boolean} True if the QualityLevel is enabled.\n         */\n        get() {\n          return level.enabled_();\n        },\n        /**\n         * Enable or disable the QualityLevel.\n         *\n         * @param {boolean} enable true to enable QualityLevel, false to disable.\n         */\n        set(enable) {\n          level.enabled_(enable);\n        }\n      });\n      return level;\n    }\n  }\n\n  /**\n   * A list of QualityLevels.\n   *\n   * interface QualityLevelList : EventTarget {\n   *   getter QualityLevel (unsigned long index);\n   *   readonly attribute unsigned long length;\n   *   readonly attribute long selectedIndex;\n   *\n   *   void addQualityLevel(QualityLevel qualityLevel)\n   *   void removeQualityLevel(QualityLevel remove)\n   *   QualityLevel? getQualityLevelById(DOMString id);\n   *\n   *   attribute EventHandler onchange;\n   *   attribute EventHandler onaddqualitylevel;\n   *   attribute EventHandler onremovequalitylevel;\n   * };\n   *\n   * @extends videojs.EventTarget\n   * @class QualityLevelList\n   */\n\n  class QualityLevelList extends videojs__default['default'].EventTarget {\n    constructor() {\n      super();\n      let list = this; // eslint-disable-line\n\n      list.levels_ = [];\n      list.selectedIndex_ = -1;\n      /**\n       * Get the index of the currently selected QualityLevel.\n       *\n       * @returns {number} The index of the selected QualityLevel. -1 if none selected.\n       * @readonly\n       */\n\n      Object.defineProperty(list, 'selectedIndex', {\n        get() {\n          return list.selectedIndex_;\n        }\n      });\n      /**\n       * Get the length of the list of QualityLevels.\n       *\n       * @returns {number} The length of the list.\n       * @readonly\n       */\n\n      Object.defineProperty(list, 'length', {\n        get() {\n          return list.levels_.length;\n        }\n      });\n      return list;\n    }\n    /**\n     * Adds a quality level to the list.\n     *\n     * @param {Representation|Object} representation The representation of the quality level\n     * @param {string}   representation.id        Unique id of the QualityLevel\n     * @param {number=}  representation.width     Resolution width of the QualityLevel\n     * @param {number=}  representation.height    Resolution height of the QualityLevel\n     * @param {number}   representation.bandwidth Bitrate of the QualityLevel\n     * @param {number=}  representation.frameRate Frame-rate of the QualityLevel\n     * @param {Function} representation.enabled   Callback to enable/disable QualityLevel\n     * @return {QualityLevel} the QualityLevel added to the list\n     * @method addQualityLevel\n     */\n\n    addQualityLevel(representation) {\n      let qualityLevel = this.getQualityLevelById(representation.id); // Do not add duplicate quality levels\n\n      if (qualityLevel) {\n        return qualityLevel;\n      }\n      const index = this.levels_.length;\n      qualityLevel = new QualityLevel(representation);\n      if (!('' + index in this)) {\n        Object.defineProperty(this, index, {\n          get() {\n            return this.levels_[index];\n          }\n        });\n      }\n      this.levels_.push(qualityLevel);\n      this.trigger({\n        qualityLevel,\n        type: 'addqualitylevel'\n      });\n      return qualityLevel;\n    }\n    /**\n     * Removes a quality level from the list.\n     *\n     * @param {QualityLevel} remove QualityLevel to remove to the list.\n     * @return {QualityLevel|null} the QualityLevel removed or null if nothing removed\n     * @method removeQualityLevel\n     */\n\n    removeQualityLevel(qualityLevel) {\n      let removed = null;\n      for (let i = 0, l = this.length; i < l; i++) {\n        if (this[i] === qualityLevel) {\n          removed = this.levels_.splice(i, 1)[0];\n          if (this.selectedIndex_ === i) {\n            this.selectedIndex_ = -1;\n          } else if (this.selectedIndex_ > i) {\n            this.selectedIndex_--;\n          }\n          break;\n        }\n      }\n      if (removed) {\n        this.trigger({\n          qualityLevel,\n          type: 'removequalitylevel'\n        });\n      }\n      return removed;\n    }\n    /**\n     * Searches for a QualityLevel with the given id.\n     *\n     * @param {string} id The id of the QualityLevel to find.\n     * @return {QualityLevel|null} The QualityLevel with id, or null if not found.\n     * @method getQualityLevelById\n     */\n\n    getQualityLevelById(id) {\n      for (let i = 0, l = this.length; i < l; i++) {\n        const level = this[i];\n        if (level.id === id) {\n          return level;\n        }\n      }\n      return null;\n    }\n    /**\n     * Resets the list of QualityLevels to empty\n     *\n     * @method dispose\n     */\n\n    dispose() {\n      this.selectedIndex_ = -1;\n      this.levels_.length = 0;\n    }\n  }\n  /**\n   * change - The selected QualityLevel has changed.\n   * addqualitylevel - A QualityLevel has been added to the QualityLevelList.\n   * removequalitylevel - A QualityLevel has been removed from the QualityLevelList.\n   */\n\n  QualityLevelList.prototype.allowedEvents_ = {\n    change: 'change',\n    addqualitylevel: 'addqualitylevel',\n    removequalitylevel: 'removequalitylevel'\n  }; // emulate attribute EventHandler support to allow for feature detection\n\n  for (const event in QualityLevelList.prototype.allowedEvents_) {\n    QualityLevelList.prototype['on' + event] = null;\n  }\n  var version = \"3.0.0\";\n  const registerPlugin = videojs__default['default'].registerPlugin || videojs__default['default'].plugin;\n  /**\n   * Initialization function for the qualityLevels plugin. Sets up the QualityLevelList and\n   * event handlers.\n   *\n   * @param {Player} player Player object.\n   * @param {Object} options Plugin options object.\n   * @function initPlugin\n   */\n\n  const initPlugin = function (player, options) {\n    const originalPluginFn = player.qualityLevels;\n    const qualityLevelList = new QualityLevelList();\n    const disposeHandler = function () {\n      qualityLevelList.dispose();\n      player.qualityLevels = originalPluginFn;\n      player.off('dispose', disposeHandler);\n    };\n    player.on('dispose', disposeHandler);\n    player.qualityLevels = () => qualityLevelList;\n    player.qualityLevels.VERSION = version;\n    return qualityLevelList;\n  };\n  /**\n   * A video.js plugin.\n   *\n   * In the plugin function, the value of `this` is a video.js `Player`\n   * instance. You cannot rely on the player being in a \"ready\" state here,\n   * depending on how the plugin is invoked. This may or may not be important\n   * to you; if not, remove the wait for \"ready\"!\n   *\n   * @param {Object} options Plugin options object\n   * @function qualityLevels\n   */\n\n  const qualityLevels = function (options) {\n    return initPlugin(this, videojs__default['default'].mergeOptions({}, options));\n  }; // Register the plugin with video.js.\n\n  registerPlugin('qualityLevels', qualityLevels); // Include the version number.\n\n  qualityLevels.VERSION = version;\n  return qualityLevels;\n});","map":{"version":3,"names":["global","factory","exports","module","require","define","amd","globalThis","self","videojsContribQualityLevels","videojs","_interopDefaultLegacy","e","videojs__default","QualityLevel","constructor","representation","level","id","label","width","height","bitrate","bandwidth","frameRate","enabled_","enabled","Object","defineProperty","get","set","enable","QualityLevelList","EventTarget","list","levels_","selectedIndex_","length","addQualityLevel","qualityLevel","getQualityLevelById","index","push","trigger","type","removeQualityLevel","removed","i","l","splice","dispose","prototype","allowedEvents_","change","addqualitylevel","removequalitylevel","event","version","registerPlugin","plugin","initPlugin","player","options","originalPluginFn","qualityLevels","qualityLevelList","disposeHandler","off","on","VERSION","mergeOptions"],"sources":["/Users/cedric/Desktop/projects/video_player_uploader-master/frontend-app/node_modules/videojs-contrib-quality-levels/dist/videojs-contrib-quality-levels.js"],"sourcesContent":["/*! @name videojs-contrib-quality-levels @version 3.0.0 @license Apache-2.0 */\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('video.js')) :\n  typeof define === 'function' && define.amd ? define(['video.js'], factory) :\n  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.videojsContribQualityLevels = factory(global.videojs));\n}(this, (function (videojs) { 'use strict';\n\n  function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\n  var videojs__default = /*#__PURE__*/_interopDefaultLegacy(videojs);\n\n  /**\n   * A single QualityLevel.\n   *\n   * interface QualityLevel {\n   *   readonly attribute DOMString id;\n   *            attribute DOMString label;\n   *   readonly attribute long width;\n   *   readonly attribute long height;\n   *   readonly attribute long bitrate;\n   *            attribute boolean enabled;\n   * };\n   *\n   * @class QualityLevel\n   */\n  class QualityLevel {\n    /**\n     * Creates a QualityLevel\n     *\n     * @param {Representation|Object} representation The representation of the quality level\n     * @param {string}   representation.id        Unique id of the QualityLevel\n     * @param {number=}  representation.width     Resolution width of the QualityLevel\n     * @param {number=}  representation.height    Resolution height of the QualityLevel\n     * @param {number}   representation.bandwidth Bitrate of the QualityLevel\n     * @param {number=}  representation.frameRate Frame-rate of the QualityLevel\n     * @param {Function} representation.enabled   Callback to enable/disable QualityLevel\n     */\n    constructor(representation) {\n      let level = this; // eslint-disable-line\n\n      level.id = representation.id;\n      level.label = level.id;\n      level.width = representation.width;\n      level.height = representation.height;\n      level.bitrate = representation.bandwidth;\n      level.frameRate = representation.frameRate;\n      level.enabled_ = representation.enabled;\n      Object.defineProperty(level, 'enabled', {\n        /**\n         * Get whether the QualityLevel is enabled.\n         *\n         * @return {boolean} True if the QualityLevel is enabled.\n         */\n        get() {\n          return level.enabled_();\n        },\n\n        /**\n         * Enable or disable the QualityLevel.\n         *\n         * @param {boolean} enable true to enable QualityLevel, false to disable.\n         */\n        set(enable) {\n          level.enabled_(enable);\n        }\n\n      });\n      return level;\n    }\n\n  }\n\n  /**\n   * A list of QualityLevels.\n   *\n   * interface QualityLevelList : EventTarget {\n   *   getter QualityLevel (unsigned long index);\n   *   readonly attribute unsigned long length;\n   *   readonly attribute long selectedIndex;\n   *\n   *   void addQualityLevel(QualityLevel qualityLevel)\n   *   void removeQualityLevel(QualityLevel remove)\n   *   QualityLevel? getQualityLevelById(DOMString id);\n   *\n   *   attribute EventHandler onchange;\n   *   attribute EventHandler onaddqualitylevel;\n   *   attribute EventHandler onremovequalitylevel;\n   * };\n   *\n   * @extends videojs.EventTarget\n   * @class QualityLevelList\n   */\n\n  class QualityLevelList extends videojs__default['default'].EventTarget {\n    constructor() {\n      super();\n      let list = this; // eslint-disable-line\n\n      list.levels_ = [];\n      list.selectedIndex_ = -1;\n      /**\n       * Get the index of the currently selected QualityLevel.\n       *\n       * @returns {number} The index of the selected QualityLevel. -1 if none selected.\n       * @readonly\n       */\n\n      Object.defineProperty(list, 'selectedIndex', {\n        get() {\n          return list.selectedIndex_;\n        }\n\n      });\n      /**\n       * Get the length of the list of QualityLevels.\n       *\n       * @returns {number} The length of the list.\n       * @readonly\n       */\n\n      Object.defineProperty(list, 'length', {\n        get() {\n          return list.levels_.length;\n        }\n\n      });\n      return list;\n    }\n    /**\n     * Adds a quality level to the list.\n     *\n     * @param {Representation|Object} representation The representation of the quality level\n     * @param {string}   representation.id        Unique id of the QualityLevel\n     * @param {number=}  representation.width     Resolution width of the QualityLevel\n     * @param {number=}  representation.height    Resolution height of the QualityLevel\n     * @param {number}   representation.bandwidth Bitrate of the QualityLevel\n     * @param {number=}  representation.frameRate Frame-rate of the QualityLevel\n     * @param {Function} representation.enabled   Callback to enable/disable QualityLevel\n     * @return {QualityLevel} the QualityLevel added to the list\n     * @method addQualityLevel\n     */\n\n\n    addQualityLevel(representation) {\n      let qualityLevel = this.getQualityLevelById(representation.id); // Do not add duplicate quality levels\n\n      if (qualityLevel) {\n        return qualityLevel;\n      }\n\n      const index = this.levels_.length;\n      qualityLevel = new QualityLevel(representation);\n\n      if (!('' + index in this)) {\n        Object.defineProperty(this, index, {\n          get() {\n            return this.levels_[index];\n          }\n\n        });\n      }\n\n      this.levels_.push(qualityLevel);\n      this.trigger({\n        qualityLevel,\n        type: 'addqualitylevel'\n      });\n      return qualityLevel;\n    }\n    /**\n     * Removes a quality level from the list.\n     *\n     * @param {QualityLevel} remove QualityLevel to remove to the list.\n     * @return {QualityLevel|null} the QualityLevel removed or null if nothing removed\n     * @method removeQualityLevel\n     */\n\n\n    removeQualityLevel(qualityLevel) {\n      let removed = null;\n\n      for (let i = 0, l = this.length; i < l; i++) {\n        if (this[i] === qualityLevel) {\n          removed = this.levels_.splice(i, 1)[0];\n\n          if (this.selectedIndex_ === i) {\n            this.selectedIndex_ = -1;\n          } else if (this.selectedIndex_ > i) {\n            this.selectedIndex_--;\n          }\n\n          break;\n        }\n      }\n\n      if (removed) {\n        this.trigger({\n          qualityLevel,\n          type: 'removequalitylevel'\n        });\n      }\n\n      return removed;\n    }\n    /**\n     * Searches for a QualityLevel with the given id.\n     *\n     * @param {string} id The id of the QualityLevel to find.\n     * @return {QualityLevel|null} The QualityLevel with id, or null if not found.\n     * @method getQualityLevelById\n     */\n\n\n    getQualityLevelById(id) {\n      for (let i = 0, l = this.length; i < l; i++) {\n        const level = this[i];\n\n        if (level.id === id) {\n          return level;\n        }\n      }\n\n      return null;\n    }\n    /**\n     * Resets the list of QualityLevels to empty\n     *\n     * @method dispose\n     */\n\n\n    dispose() {\n      this.selectedIndex_ = -1;\n      this.levels_.length = 0;\n    }\n\n  }\n  /**\n   * change - The selected QualityLevel has changed.\n   * addqualitylevel - A QualityLevel has been added to the QualityLevelList.\n   * removequalitylevel - A QualityLevel has been removed from the QualityLevelList.\n   */\n\n\n  QualityLevelList.prototype.allowedEvents_ = {\n    change: 'change',\n    addqualitylevel: 'addqualitylevel',\n    removequalitylevel: 'removequalitylevel'\n  }; // emulate attribute EventHandler support to allow for feature detection\n\n  for (const event in QualityLevelList.prototype.allowedEvents_) {\n    QualityLevelList.prototype['on' + event] = null;\n  }\n\n  var version = \"3.0.0\";\n\n  const registerPlugin = videojs__default['default'].registerPlugin || videojs__default['default'].plugin;\n  /**\n   * Initialization function for the qualityLevels plugin. Sets up the QualityLevelList and\n   * event handlers.\n   *\n   * @param {Player} player Player object.\n   * @param {Object} options Plugin options object.\n   * @function initPlugin\n   */\n\n  const initPlugin = function (player, options) {\n    const originalPluginFn = player.qualityLevels;\n    const qualityLevelList = new QualityLevelList();\n\n    const disposeHandler = function () {\n      qualityLevelList.dispose();\n      player.qualityLevels = originalPluginFn;\n      player.off('dispose', disposeHandler);\n    };\n\n    player.on('dispose', disposeHandler);\n\n    player.qualityLevels = () => qualityLevelList;\n\n    player.qualityLevels.VERSION = version;\n    return qualityLevelList;\n  };\n  /**\n   * A video.js plugin.\n   *\n   * In the plugin function, the value of `this` is a video.js `Player`\n   * instance. You cannot rely on the player being in a \"ready\" state here,\n   * depending on how the plugin is invoked. This may or may not be important\n   * to you; if not, remove the wait for \"ready\"!\n   *\n   * @param {Object} options Plugin options object\n   * @function qualityLevels\n   */\n\n\n  const qualityLevels = function (options) {\n    return initPlugin(this, videojs__default['default'].mergeOptions({}, options));\n  }; // Register the plugin with video.js.\n\n\n  registerPlugin('qualityLevels', qualityLevels); // Include the version number.\n\n  qualityLevels.VERSION = version;\n\n  return qualityLevels;\n\n})));\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}